{"ast":null,"code":"var _jsxFileName = \"/Users/luisjorge/code/Flatiron-Phase-2/16-Phase-2-Project/titan-capital-financial/src/components/MonthlyFinancialChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { Chart, registerables } from 'chart.js/auto';\nimport { format, getYear, startOfMonth, endOfMonth } from 'date-fns';\n\n// Register necessary plugins\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(...registerables);\nconst MonthlyFinancialChart = ({\n  transactions\n}) => {\n  _s();\n  const [chart, setChart] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [aggregatedData, setAggregatedData] = useState({\n    labels: [],\n    data: [],\n    balanceData: [],\n    minLoss: 0,\n    maxIncome: 0\n  });\n  useEffect(() => {\n    // Recalculate aggregated data whenever selected date changes\n    const data = aggregateData(transactions);\n    setAggregatedData(data);\n  }, [transactions, selectedDate]);\n  useEffect(() => {\n    // Check if there's an existing chart\n    if (chart) {\n      // Destroy the existing chart\n      chart.destroy();\n    }\n    if (aggregatedData.labels.length > 0) {\n      const ctx = document.getElementById('monthlyFinancialChart').getContext('2d');\n      const newChart = new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: aggregatedData.labels,\n          datasets: [{\n            label: 'Monthly Transactions',\n            data: aggregatedData.data,\n            backgroundColor: aggregatedData.data.map(amount => amount >= 0 ? 'rgba(75, 192, 192, 0.2)' : 'rgba(255, 99, 132, 0.2)'),\n            borderColor: aggregatedData.data.map(amount => amount >= 0 ? 'rgba(75, 192, 192, 1)' : 'rgba(255, 99, 132, 1)'),\n            borderWidth: 1\n          }, {\n            type: 'line',\n            label: 'Balance',\n            data: aggregatedData.balanceData,\n            borderColor: 'rgba(255, 206, 86, 1)',\n            borderWidth: 2,\n            fill: false\n          }]\n        },\n        options: {\n          scales: {\n            x: {\n              title: {\n                display: true,\n                text: 'Month'\n              }\n            },\n            y: {\n              beginAtZero: true,\n              suggestedMin: aggregatedData.minLoss,\n              suggestedMax: aggregatedData.maxIncome,\n              title: {\n                display: true,\n                text: 'Transaction Amount'\n              }\n            }\n          }\n        }\n      });\n      setChart(newChart);\n    }\n  }, [aggregatedData, chart]);\n  const aggregateData = data => {\n    const result = data.reduce((result, transaction) => {\n      const date = new Date(transaction.timestamp);\n      const formattedMonth = format(date, 'MM/yyyy');\n\n      // Check if the transaction is in the selected year\n      if (getYear(date) === getYear(selectedDate)) {\n        const existingIndex = result.labels.findIndex(label => label === formattedMonth);\n        if (existingIndex !== -1) {\n          result.data[existingIndex] += transaction.amount;\n        } else {\n          result.labels.push(formattedMonth);\n          result.data.push(transaction.amount);\n        }\n\n        // Update the maximum income and minimum loss\n        if (transaction.amount >= 0) {\n          result.maxIncome = Math.max(result.maxIncome, transaction.amount);\n        } else {\n          result.minLoss = Math.min(result.minLoss, transaction.amount);\n        }\n      }\n      return result;\n    }, {\n      labels: [],\n      data: [],\n      balanceData: [],\n      minLoss: 0,\n      maxIncome: 0\n    });\n\n    // Calculate the cumulative balance for each month\n    result.labels.forEach((label, index) => {\n      const transactionsForMonth = data.filter(transaction => {\n        const date = new Date(transaction.timestamp);\n        return format(date, 'MM/yyyy') === label;\n      });\n      const cumulativeBalance = transactionsForMonth.reduce((sum, transaction) => sum + transaction.amount, 0);\n      const lastBalance = result.balanceData[index - 1] || 0;\n      result.balanceData.push(lastBalance + cumulativeBalance);\n    });\n    return result;\n  };\n  const handleDateChange = date => {\n    setSelectedDate(date);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"financialChart\",\n    children: [/*#__PURE__*/_jsxDEV(DatePicker, {\n      className: \"financialChart__datePicker\",\n      selected: selectedDate,\n      onChange: handleDateChange,\n      dateFormat: \"MM/yyyy\",\n      showMonthYearPicker: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"monthlyFinancialChart\",\n      width: \"800\",\n      height: \"400\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n};\n_s(MonthlyFinancialChart, \"hmbjoEgg/imOraHO5qyBunwHvwM=\");\n_c = MonthlyFinancialChart;\nexport default MonthlyFinancialChart;\nvar _c;\n$RefreshReg$(_c, \"MonthlyFinancialChart\");","map":{"version":3,"names":["React","useEffect","useState","DatePicker","Chart","registerables","format","getYear","startOfMonth","endOfMonth","jsxDEV","_jsxDEV","register","MonthlyFinancialChart","transactions","_s","chart","setChart","selectedDate","setSelectedDate","Date","aggregatedData","setAggregatedData","labels","data","balanceData","minLoss","maxIncome","aggregateData","destroy","length","ctx","document","getElementById","getContext","newChart","type","datasets","label","backgroundColor","map","amount","borderColor","borderWidth","fill","options","scales","x","title","display","text","y","beginAtZero","suggestedMin","suggestedMax","result","reduce","transaction","date","timestamp","formattedMonth","existingIndex","findIndex","push","Math","max","min","forEach","index","transactionsForMonth","filter","cumulativeBalance","sum","lastBalance","handleDateChange","className","children","selected","onChange","dateFormat","showMonthYearPicker","fileName","_jsxFileName","lineNumber","columnNumber","id","width","height","_c","$RefreshReg$"],"sources":["/Users/luisjorge/code/Flatiron-Phase-2/16-Phase-2-Project/titan-capital-financial/src/components/MonthlyFinancialChart.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { Chart, registerables } from 'chart.js/auto';\nimport { format, getYear, startOfMonth, endOfMonth } from 'date-fns';\n\n// Register necessary plugins\nChart.register(...registerables);\n\nconst MonthlyFinancialChart = ({ transactions }) => {\n  const [chart, setChart] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [aggregatedData, setAggregatedData] = useState({\n    labels: [],\n    data: [],\n    balanceData: [],\n    minLoss: 0,\n    maxIncome: 0,\n  });\n\n  useEffect(() => {\n    // Recalculate aggregated data whenever selected date changes\n    const data = aggregateData(transactions);\n    setAggregatedData(data);\n  }, [transactions, selectedDate]);\n\n  useEffect(() => {\n    // Check if there's an existing chart\n    if (chart) {\n      // Destroy the existing chart\n      chart.destroy();\n    }\n\n    if (aggregatedData.labels.length > 0) {\n      const ctx = document.getElementById('monthlyFinancialChart').getContext('2d');\n      const newChart = new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: aggregatedData.labels,\n          datasets: [\n            {\n              label: 'Monthly Transactions',\n              data: aggregatedData.data,\n              backgroundColor: aggregatedData.data.map((amount) =>\n                amount >= 0 ? 'rgba(75, 192, 192, 0.2)' : 'rgba(255, 99, 132, 0.2)'\n              ),\n              borderColor: aggregatedData.data.map((amount) =>\n                amount >= 0 ? 'rgba(75, 192, 192, 1)' : 'rgba(255, 99, 132, 1)'\n              ),\n              borderWidth: 1,\n            },\n            {\n              type: 'line',\n              label: 'Balance',\n              data: aggregatedData.balanceData,\n              borderColor: 'rgba(255, 206, 86, 1)',\n              borderWidth: 2,\n              fill: false,\n            },\n          ],\n        },\n        options: {\n          scales: {\n            x: {\n              title: {\n                display: true,\n                text: 'Month',\n              },\n            },\n            y: {\n              beginAtZero: true,\n              suggestedMin: aggregatedData.minLoss,\n              suggestedMax: aggregatedData.maxIncome,\n              title: {\n                display: true,\n                text: 'Transaction Amount',\n              },\n            },\n          },\n        },\n      });\n\n      setChart(newChart);\n    }\n  }, [aggregatedData, chart]);\n\n  const aggregateData = (data) => {\n    const result = data.reduce(\n      (result, transaction) => {\n        const date = new Date(transaction.timestamp);\n        const formattedMonth = format(date, 'MM/yyyy');\n\n        // Check if the transaction is in the selected year\n        if (getYear(date) === getYear(selectedDate)) {\n          const existingIndex = result.labels.findIndex((label) => label === formattedMonth);\n\n          if (existingIndex !== -1) {\n            result.data[existingIndex] += transaction.amount;\n          } else {\n            result.labels.push(formattedMonth);\n            result.data.push(transaction.amount);\n          }\n\n          // Update the maximum income and minimum loss\n          if (transaction.amount >= 0) {\n            result.maxIncome = Math.max(result.maxIncome, transaction.amount);\n          } else {\n            result.minLoss = Math.min(result.minLoss, transaction.amount);\n          }\n        }\n\n        return result;\n      },\n      { labels: [], data: [], balanceData: [], minLoss: 0, maxIncome: 0 }\n    );\n\n    // Calculate the cumulative balance for each month\n    result.labels.forEach((label, index) => {\n      const transactionsForMonth = data.filter((transaction) => {\n        const date = new Date(transaction.timestamp);\n        return format(date, 'MM/yyyy') === label;\n      });\n\n      const cumulativeBalance = transactionsForMonth.reduce((sum, transaction) => sum + transaction.amount, 0);\n      const lastBalance = result.balanceData[index - 1] || 0;\n      result.balanceData.push(lastBalance + cumulativeBalance);\n    });\n\n    return result;\n  };\n\n  const handleDateChange = (date) => {\n    setSelectedDate(date);\n  };\n\n  return (\n    <div className='financialChart'>\n      <DatePicker\n        className=\"financialChart__datePicker\"\n        selected={selectedDate}\n        onChange={handleDateChange}\n        dateFormat=\"MM/yyyy\"\n        showMonthYearPicker\n      />\n      <canvas id=\"monthlyFinancialChart\" width=\"800\" height=\"400\"/>\n    </div>\n  );\n};\n\nexport default MonthlyFinancialChart;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}