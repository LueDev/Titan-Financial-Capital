{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n0 && (module.exports = {\n  batcher: null,\n  default: null\n});\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n_export(exports, {\n  batcher: function () {\n    return batcher;\n  },\n  default: function () {\n    return _default;\n  }\n});\nconst _crypto = require(\"crypto\");\nconst _shared = require(\"../shared\");\nconst _fs = /*#__PURE__*/_interop_require_default(require(\"fs\"));\nconst _path = /*#__PURE__*/_interop_require_default(require(\"path\"));\nconst _constants = require(\"../../shared/lib/constants\");\nfunction _interop_require_default(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nconst localEndpoint = {\n  serviceName: \"nextjs\",\n  ipv4: \"127.0.0.1\",\n  port: 9411\n};\nfunction batcher(reportEvents) {\n  const events = [];\n  // Promise queue to ensure events are always sent on flushAll\n  const queue = new Set();\n  return {\n    flushAll: async () => {\n      await Promise.all(queue);\n      if (events.length > 0) {\n        await reportEvents(events);\n        events.length = 0;\n      }\n    },\n    report: event => {\n      events.push(event);\n      if (events.length > 100) {\n        const evts = events.slice();\n        events.length = 0;\n        const report = reportEvents(evts);\n        queue.add(report);\n        report.then(() => queue.delete(report));\n      }\n    }\n  };\n}\nlet writeStream;\nlet traceId;\nlet batch;\nconst writeStreamOptions = {\n  flags: \"a\",\n  encoding: \"utf8\"\n};\nclass RotatingWriteStream {\n  constructor(file, sizeLimit) {\n    this.file = file;\n    this.size = 0;\n    this.sizeLimit = sizeLimit;\n    this.createWriteStream();\n  }\n  createWriteStream() {\n    this.writeStream = _fs.default.createWriteStream(this.file, writeStreamOptions);\n  }\n  // Recreate the file\n  async rotate() {\n    await this.end();\n    try {\n      _fs.default.unlinkSync(this.file);\n    } catch (err) {\n      // It's fine if the file does not exist yet\n      if (err.code !== \"ENOENT\") {\n        throw err;\n      }\n    }\n    this.size = 0;\n    this.createWriteStream();\n    this.rotatePromise = undefined;\n  }\n  async write(data) {\n    if (this.rotatePromise) await this.rotatePromise;\n    this.size += data.length;\n    if (this.size > this.sizeLimit) {\n      await (this.rotatePromise = this.rotate());\n    }\n    if (!this.writeStream.write(data, \"utf8\")) {\n      if (this.drainPromise === undefined) {\n        this.drainPromise = new Promise((resolve, _reject) => {\n          this.writeStream.once(\"drain\", () => {\n            this.drainPromise = undefined;\n            resolve();\n          });\n        });\n      }\n      await this.drainPromise;\n    }\n  }\n  end() {\n    return new Promise(resolve => {\n      this.writeStream.end(resolve);\n    });\n  }\n}\nconst reportToLocalHost = (name, duration, timestamp, id, parentId, attrs, startTime) => {\n  const distDir = _shared.traceGlobals.get(\"distDir\");\n  const phase = _shared.traceGlobals.get(\"phase\");\n  if (!distDir || !phase) {\n    return;\n  }\n  if (!traceId) {\n    traceId = process.env.TRACE_ID || (0, _crypto.randomBytes)(8).toString(\"hex\");\n  }\n  if (!batch) {\n    batch = batcher(async events => {\n      if (!writeStream) {\n        await _fs.default.promises.mkdir(distDir, {\n          recursive: true\n        });\n        const file = _path.default.join(distDir, \"trace\");\n        writeStream = new RotatingWriteStream(file,\n        // Development is limited to 50MB, production is unlimited\n        phase === _constants.PHASE_DEVELOPMENT_SERVER ? 52428800 : Infinity);\n      }\n      const eventsJson = JSON.stringify(events);\n      try {\n        await writeStream.write(eventsJson + \"\\n\");\n      } catch (err) {\n        console.log(err);\n      }\n    });\n  }\n  batch.report({\n    traceId,\n    parentId,\n    name,\n    id,\n    timestamp,\n    duration,\n    tags: attrs,\n    startTime\n  });\n};\nconst _default = {\n  flushAll: () => batch ? batch.flushAll().then(() => {\n    const phase = _shared.traceGlobals.get(\"phase\");\n    // Only end writeStream when manually flushing in production\n    if (phase !== _constants.PHASE_DEVELOPMENT_SERVER) {\n      writeStream.end();\n    }\n  }) : undefined,\n  report: reportToLocalHost\n};","map":{"version":3,"names":["batcher","default","_default","localEndpoint","serviceName","ipv4","port","reportEvents","events","queue","Set","flushAll","Promise","all","length","report","event","push","evts","slice","add","then","delete","writeStream","traceId","batch","writeStreamOptions","flags","encoding","RotatingWriteStream","constructor","file","sizeLimit","size","createWriteStream","_fs","rotate","end","unlinkSync","err","code","rotatePromise","undefined","write","data","drainPromise","resolve","_reject","once","reportToLocalHost","name","duration","timestamp","id","parentId","attrs","startTime","distDir","_shared","traceGlobals","get","phase","process","env","TRACE_ID","_crypto","randomBytes","toString","promises","mkdir","recursive","_path","join","_constants","PHASE_DEVELOPMENT_SERVER","Infinity","eventsJson","JSON","stringify","console","log","tags"],"sources":["../../../src/trace/report/to-json.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;;;;EAyBgBA,OAAO,WAAAA,CAAA;WAAPA,OAAA;;EAgJhBC,OAYC,WAAAA,CAAA;WAZDC,QAAA;;;wBAzK4B;wBACC;0DACd;4DACE;2BACwB;;;;;;AAEzC,MAAMC,aAAA,GAAgB;EACpBC,WAAA,EAAa;EACbC,IAAA,EAAM;EACNC,IAAA,EAAM;AACR;AAeO,SAASN,QAAQO,YAA8C;EACpE,MAAMC,MAAA,GAAkB,EAAE;EAC1B;EACA,MAAMC,KAAA,GAAQ,IAAIC,GAAA;EAClB,OAAO;IACLC,QAAA,EAAU,MAAAA,CAAA;MACR,MAAMC,OAAA,CAAQC,GAAG,CAACJ,KAAA;MAClB,IAAID,MAAA,CAAOM,MAAM,GAAG,GAAG;QACrB,MAAMP,YAAA,CAAaC,MAAA;QACnBA,MAAA,CAAOM,MAAM,GAAG;MAClB;IACF;IACAC,MAAA,EAASC,KAAA;MACPR,MAAA,CAAOS,IAAI,CAACD,KAAA;MAEZ,IAAIR,MAAA,CAAOM,MAAM,GAAG,KAAK;QACvB,MAAMI,IAAA,GAAOV,MAAA,CAAOW,KAAK;QACzBX,MAAA,CAAOM,MAAM,GAAG;QAChB,MAAMC,MAAA,GAASR,YAAA,CAAaW,IAAA;QAC5BT,KAAA,CAAMW,GAAG,CAACL,MAAA;QACVA,MAAA,CAAOM,IAAI,CAAC,MAAMZ,KAAA,CAAMa,MAAM,CAACP,MAAA;MACjC;IACF;EACF;AACF;AAEA,IAAIQ,WAAA;AACJ,IAAIC,OAAA;AACJ,IAAIC,KAAA;AAEJ,MAAMC,kBAAA,GAAqB;EACzBC,KAAA,EAAO;EACPC,QAAA,EAAU;AACZ;AACA,MAAMC,mBAAA;EAOJC,YAAYC,IAAY,EAAEC,SAAiB,EAAE;IAC3C,IAAI,CAACD,IAAI,GAAGA,IAAA;IACZ,IAAI,CAACE,IAAI,GAAG;IACZ,IAAI,CAACD,SAAS,GAAGA,SAAA;IACjB,IAAI,CAACE,iBAAiB;EACxB;EACQA,kBAAA,EAAoB;IAC1B,IAAI,CAACX,WAAW,GAAGY,GAAA,CAAAlC,OAAE,CAACiC,iBAAiB,CAAC,IAAI,CAACH,IAAI,EAAEL,kBAAA;EACrD;EACA;EACA,MAAcU,OAAA,EAAS;IACrB,MAAM,IAAI,CAACC,GAAG;IACd,IAAI;MACFF,GAAA,CAAAlC,OAAE,CAACqC,UAAU,CAAC,IAAI,CAACP,IAAI;IACzB,EAAE,OAAOQ,GAAA,EAAU;MACjB;MACA,IAAIA,GAAA,CAAIC,IAAI,KAAK,UAAU;QACzB,MAAMD,GAAA;MACR;IACF;IACA,IAAI,CAACN,IAAI,GAAG;IACZ,IAAI,CAACC,iBAAiB;IACtB,IAAI,CAACO,aAAa,GAAGC,SAAA;EACvB;EACA,MAAMC,MAAMC,IAAY,EAAiB;IACvC,IAAI,IAAI,CAACH,aAAa,EAAE,MAAM,IAAI,CAACA,aAAa;IAEhD,IAAI,CAACR,IAAI,IAAIW,IAAA,CAAK9B,MAAM;IACxB,IAAI,IAAI,CAACmB,IAAI,GAAG,IAAI,CAACD,SAAS,EAAE;MAC9B,OAAO,IAAI,CAACS,aAAa,GAAG,IAAI,CAACL,MAAM,EAAC;IAC1C;IAEA,IAAI,CAAC,IAAI,CAACb,WAAW,CAACoB,KAAK,CAACC,IAAA,EAAM,SAAS;MACzC,IAAI,IAAI,CAACC,YAAY,KAAKH,SAAA,EAAW;QACnC,IAAI,CAACG,YAAY,GAAG,IAAIjC,OAAA,CAAc,CAACkC,OAAA,EAASC,OAAA;UAC9C,IAAI,CAACxB,WAAW,CAACyB,IAAI,CAAC,SAAS;YAC7B,IAAI,CAACH,YAAY,GAAGH,SAAA;YACpBI,OAAA;UACF;QACF;MACF;MACA,MAAM,IAAI,CAACD,YAAY;IACzB;EACF;EAEAR,IAAA,EAAqB;IACnB,OAAO,IAAIzB,OAAA,CAASkC,OAAA;MAClB,IAAI,CAACvB,WAAW,CAACc,GAAG,CAACS,OAAA;IACvB;EACF;AACF;AAEA,MAAMG,iBAAA,GAAoBA,CACxBC,IAAA,EACAC,QAAA,EACAC,SAAA,EACAC,EAAA,EACAC,QAAA,EACAC,KAAA,EACAC,SAAA;EAEA,MAAMC,OAAA,GAAUC,OAAA,CAAAC,YAAY,CAACC,GAAG,CAAC;EACjC,MAAMC,KAAA,GAAQH,OAAA,CAAAC,YAAY,CAACC,GAAG,CAAC;EAC/B,IAAI,CAACH,OAAA,IAAW,CAACI,KAAA,EAAO;IACtB;EACF;EAEA,IAAI,CAACrC,OAAA,EAAS;IACZA,OAAA,GAAUsC,OAAA,CAAQC,GAAG,CAACC,QAAQ,IAAI,IAAAC,OAAA,CAAAC,WAAW,EAAC,GAAGC,QAAQ,CAAC;EAC5D;EAEA,IAAI,CAAC1C,KAAA,EAAO;IACVA,KAAA,GAAQzB,OAAA,CAAQ,MAAOQ,MAAA;MACrB,IAAI,CAACe,WAAA,EAAa;QAChB,MAAMY,GAAA,CAAAlC,OAAE,CAACmE,QAAQ,CAACC,KAAK,CAACZ,OAAA,EAAS;UAAEa,SAAA,EAAW;QAAK;QACnD,MAAMvC,IAAA,GAAOwC,KAAA,CAAAtE,OAAI,CAACuE,IAAI,CAACf,OAAA,EAAS;QAChClC,WAAA,GAAc,IAAIM,mBAAA,CAChBE,IAAA;QACA;QACA8B,KAAA,KAAUY,UAAA,CAAAC,wBAAwB,GAAG,WAAWC,QAAA;MAEpD;MACA,MAAMC,UAAA,GAAaC,IAAA,CAAKC,SAAS,CAACtE,MAAA;MAClC,IAAI;QACF,MAAMe,WAAA,CAAYoB,KAAK,CAACiC,UAAA,GAAa;MACvC,EAAE,OAAOrC,GAAA,EAAK;QACZwC,OAAA,CAAQC,GAAG,CAACzC,GAAA;MACd;IACF;EACF;EAEAd,KAAA,CAAMV,MAAM,CAAC;IACXS,OAAA;IACA8B,QAAA;IACAJ,IAAA;IACAG,EAAA;IACAD,SAAA;IACAD,QAAA;IACA8B,IAAA,EAAM1B,KAAA;IACNC;EACF;AACF;MAEAtD,QAAA,GAAe;EACbS,QAAA,EAAUA,CAAA,KACRc,KAAA,GACIA,KAAA,CAAMd,QAAQ,GAAGU,IAAI,CAAC;IACpB,MAAMwC,KAAA,GAAQH,OAAA,CAAAC,YAAY,CAACC,GAAG,CAAC;IAC/B;IACA,IAAIC,KAAA,KAAUY,UAAA,CAAAC,wBAAwB,EAAE;MACtCnD,WAAA,CAAYc,GAAG;IACjB;EACF,KACAK,SAAA;EACN3B,MAAA,EAAQkC;AACV"},"metadata":{},"sourceType":"script","externalDependencies":[]}