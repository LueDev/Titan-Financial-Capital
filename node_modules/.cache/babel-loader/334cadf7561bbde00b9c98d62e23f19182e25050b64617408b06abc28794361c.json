{"ast":null,"code":"var _jsxFileName = \"/Users/luisjorge/code/Flatiron-Phase-2/16-Phase-2-Project/titan-capital-financial/src/components/FinancialTransactionChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { Chart, registerables } from 'chart.js/auto';\nimport { format, startOfWeek, endOfWeek, startOfMonth, endOfMonth } from 'date-fns';\n\n// Register necessary plugins\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(...registerables);\nconst FinancialTransactionChart = ({\n  transactions\n}) => {\n  _s();\n  const [chart, setChart] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  useEffect(() => {\n    if (transactions.length > 0) {\n      const aggregatedData = aggregateData(transactions);\n      const ctx = document.getElementById('financialChart').getContext('2d');\n      const newChart = new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: aggregatedData.labels,\n          datasets: [{\n            label: 'Transactions',\n            data: aggregatedData.data,\n            backgroundColor: aggregatedData.data.map(amount => amount >= 0 ? 'rgba(75, 192, 192, 0.2)' : 'rgba(255, 99, 132, 0.2)'),\n            borderColor: aggregatedData.data.map(amount => amount >= 0 ? 'rgba(75, 192, 192, 1)' : 'rgba(255, 99, 132, 1)'),\n            borderWidth: 1\n          }]\n        },\n        options: {\n          scales: {\n            x: {\n              title: {\n                display: true,\n                text: 'Date'\n              }\n            },\n            y: {\n              beginAtZero: true,\n              title: {\n                display: true,\n                text: 'Transaction Amount'\n              }\n            }\n          }\n        }\n      });\n      setChart(newChart);\n    }\n  }, [transactions, selectedDate]);\n  const aggregateData = data => {\n    const aggregatedByDay = data.reduce((result, transaction) => {\n      const date = new Date(transaction.timestamp);\n      const formattedDate = format(date, 'MM/dd/yyyy');\n      const existingIndex = result.labels.findIndex(label => label === formattedDate);\n      if (existingIndex !== -1) {\n        result.data[existingIndex] += transaction.amount;\n      } else {\n        result.labels.push(formattedDate);\n        result.data.push(transaction.amount);\n      }\n      return result;\n    }, {\n      labels: [],\n      data: []\n    });\n    return aggregatedByDay;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(DatePicker, {\n      selected: selectedDate,\n      onChange: handleDateChange,\n      dateFormat: \"MM/yyyy\",\n      showMonthYearPicker: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"financialChart\",\n      width: \"800\",\n      height: \"400\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n_s(FinancialTransactionChart, \"p1f5IXVlc6TPChPz2M4FcRug1a4=\");\n_c = FinancialTransactionChart;\nexport default FinancialTransactionChart;\nvar _c;\n$RefreshReg$(_c, \"FinancialTransactionChart\");","map":{"version":3,"names":["React","useEffect","useState","DatePicker","Chart","registerables","format","startOfWeek","endOfWeek","startOfMonth","endOfMonth","jsxDEV","_jsxDEV","register","FinancialTransactionChart","transactions","_s","chart","setChart","selectedDate","setSelectedDate","Date","length","aggregatedData","aggregateData","ctx","document","getElementById","getContext","newChart","type","data","labels","datasets","label","backgroundColor","map","amount","borderColor","borderWidth","options","scales","x","title","display","text","y","beginAtZero","aggregatedByDay","reduce","result","transaction","date","timestamp","formattedDate","existingIndex","findIndex","push","children","selected","onChange","handleDateChange","dateFormat","showMonthYearPicker","fileName","_jsxFileName","lineNumber","columnNumber","id","width","height","_c","$RefreshReg$"],"sources":["/Users/luisjorge/code/Flatiron-Phase-2/16-Phase-2-Project/titan-capital-financial/src/components/FinancialTransactionChart.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { Chart, registerables } from 'chart.js/auto';\nimport { format, startOfWeek, endOfWeek, startOfMonth, endOfMonth } from 'date-fns';\n\n// Register necessary plugins\nChart.register(...registerables);\n\nconst FinancialTransactionChart = ({ transactions }) => {\n  const [chart, setChart] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(new Date());\n\n  useEffect(() => {\n    if (transactions.length > 0) {\n      const aggregatedData = aggregateData(transactions);\n\n      const ctx = document.getElementById('financialChart').getContext('2d');\n      const newChart = new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: aggregatedData.labels,\n          datasets: [\n            {\n              label: 'Transactions',\n              data: aggregatedData.data,\n              backgroundColor: aggregatedData.data.map((amount) => (amount >= 0 ? 'rgba(75, 192, 192, 0.2)' : 'rgba(255, 99, 132, 0.2)')),\n              borderColor: aggregatedData.data.map((amount) => (amount >= 0 ? 'rgba(75, 192, 192, 1)' : 'rgba(255, 99, 132, 1)')),\n              borderWidth: 1,\n            },\n          ],\n        },\n        options: {\n          scales: {\n            x: {\n              title: {\n                display: true,\n                text: 'Date',\n              },\n            },\n            y: {\n              beginAtZero: true,\n              title: {\n                display: true,\n                text: 'Transaction Amount',\n              },\n            },\n          },\n        },\n      });\n\n      setChart(newChart);\n    }\n  }, [transactions, selectedDate]);\n\n  const aggregateData = (data) => {\n    const aggregatedByDay = data.reduce(\n      (result, transaction) => {\n        const date = new Date(transaction.timestamp);\n        const formattedDate = format(date, 'MM/dd/yyyy');\n        const existingIndex = result.labels.findIndex((label) => label === formattedDate);\n\n        if (existingIndex !== -1) {\n          result.data[existingIndex] += transaction.amount;\n        } else {\n          result.labels.push(formattedDate);\n          result.data.push(transaction.amount);\n        }\n\n        return result;\n      },\n      { labels: [], data: [] }\n    );\n\n    return aggregatedByDay;\n  };\n\n  \n  return (\n    <div>\n      <DatePicker selected={selectedDate} onChange={handleDateChange} dateFormat=\"MM/yyyy\" showMonthYearPicker />\n      <canvas id=\"financialChart\" width=\"800\" height=\"400\"></canvas>\n    </div>\n  );\n};\n\n\n\nexport default FinancialTransactionChart;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}