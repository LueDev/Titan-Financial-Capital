{"ast":null,"code":"var _jsxFileName = \"/Users/luisjorge/code/Flatiron-Phase-2/16-Phase-2-Project/titan-capital-financial/src/components/MonthlyFinancialChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { Chart, registerables } from 'chart.js/auto';\nimport { format, getYear } from 'date-fns';\n\n// Register necessary plugins\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(...registerables);\nconst MonthlyFinancialChart = ({\n  transactions\n}) => {\n  _s();\n  const [chart, setChart] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [aggregatedData, setAggregatedData] = useState({\n    labels: [],\n    data: [],\n    balanceData: [],\n    minLoss: 0,\n    maxIncome: 0\n  });\n  useEffect(() => {\n    // Recalculate aggregated data whenever selected date changes\n    const data = aggregateData(transactions);\n    setAggregatedData(data);\n  }, [transactions, selectedDate]);\n  useEffect(() => {\n    // Check if there's an existing chart\n    if (chart) {\n      // Destroy the existing chart\n      chart.destroy();\n    }\n    if (aggregatedData.labels.length > 0) {\n      const ctx = document.getElementById('monthlyFinancialChart').getContext('2d');\n      const newChart = new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: aggregatedData.labels,\n          datasets: [{\n            label: 'Monthly Transactions',\n            data: aggregatedData.data,\n            backgroundColor: aggregatedData.data.map(amount => amount >= 0 ? 'rgba(75, 192, 192, 0.2)' : 'rgba(255, 99, 132, 0.2)'),\n            borderColor: aggregatedData.data.map(amount => amount >= 0 ? 'rgba(75, 192, 192, 1)' : 'rgba(255, 99, 132, 1)'),\n            borderWidth: 1\n          }, {\n            type: 'line',\n            label: 'Balance',\n            data: aggregatedData.balanceData,\n            borderColor: 'rgba(255, 206, 86, 1)',\n            borderWidth: 2,\n            fill: false\n          }]\n        },\n        options: {\n          scales: {\n            x: {\n              title: {\n                display: true,\n                text: 'Month'\n              }\n            },\n            y: {\n              beginAtZero: true,\n              suggestedMin: aggregatedData.minLoss,\n              suggestedMax: aggregatedData.maxIncome,\n              title: {\n                display: true,\n                text: 'Transaction Amount'\n              }\n            }\n          }\n        }\n      });\n      setChart(newChart);\n    }\n  }, [aggregatedData]);\n  const aggregateData = data => {\n    const aggregatedByMonth = data.reduce((result, transaction) => {\n      const date = new Date(transaction.timestamp);\n      const formattedMonth = format(date, 'MM/yyyy');\n\n      // Check if the transaction is in the selected year\n      if (getYear(date) === getYear(selectedDate)) {\n        const existingIndex = result.labels.findIndex(label => label === formattedMonth);\n        if (existingIndex !== -1) {\n          result.data[existingIndex] += transaction.amount;\n        } else {\n          result.labels.push(formattedMonth);\n          result.data.push(transaction.amount);\n        }\n\n        // Update the maximum income and minimum loss\n        if (transaction.amount >= 0) {\n          result.maxIncome = Math.max(result.maxIncome, transaction.amount);\n        } else {\n          result.minLoss = Math.min(result.minLoss, transaction.amount);\n        }\n\n        // Update the balance for each transaction\n        const lastBalance = result.balanceData[result.balanceData.length - 1] || 0;\n        result.balanceData.push(lastBalance + transaction.amount);\n      }\n      return result;\n    }, {\n      labels: [],\n      data: [],\n      balanceData: [],\n      maxIncome: 0,\n      minLoss: 0\n    });\n    return aggregatedByMonth;\n  };\n  const handleDateChange = date => {\n    setSelectedDate(date);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"financialChart\",\n    children: [/*#__PURE__*/_jsxDEV(DatePicker, {\n      className: \"financialChart__datePicker\",\n      selected: selectedDate,\n      onChange: handleDateChange,\n      dateFormat: \"MM/yyyy\",\n      showMonthYearPicker: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"monthlyFinancialChart\",\n      width: \"800\",\n      height: \"400\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n};\n_s(MonthlyFinancialChart, \"hmbjoEgg/imOraHO5qyBunwHvwM=\");\n_c = MonthlyFinancialChart;\nexport default MonthlyFinancialChart;\nvar _c;\n$RefreshReg$(_c, \"MonthlyFinancialChart\");","map":{"version":3,"names":["React","useEffect","useState","DatePicker","Chart","registerables","format","getYear","jsxDEV","_jsxDEV","register","MonthlyFinancialChart","transactions","_s","chart","setChart","selectedDate","setSelectedDate","Date","aggregatedData","setAggregatedData","labels","data","balanceData","minLoss","maxIncome","aggregateData","destroy","length","ctx","document","getElementById","getContext","newChart","type","datasets","label","backgroundColor","map","amount","borderColor","borderWidth","fill","options","scales","x","title","display","text","y","beginAtZero","suggestedMin","suggestedMax","aggregatedByMonth","reduce","result","transaction","date","timestamp","formattedMonth","existingIndex","findIndex","push","Math","max","min","lastBalance","handleDateChange","className","children","selected","onChange","dateFormat","showMonthYearPicker","fileName","_jsxFileName","lineNumber","columnNumber","id","width","height","_c","$RefreshReg$"],"sources":["/Users/luisjorge/code/Flatiron-Phase-2/16-Phase-2-Project/titan-capital-financial/src/components/MonthlyFinancialChart.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { Chart, registerables } from 'chart.js/auto';\nimport { format, getYear } from 'date-fns';\n\n// Register necessary plugins\nChart.register(...registerables);\n\nconst MonthlyFinancialChart = ({ transactions }) => {\n  const [chart, setChart] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [aggregatedData, setAggregatedData] = useState({\n    labels: [],\n    data: [],\n    balanceData: [],\n    minLoss: 0,\n    maxIncome: 0,\n  });\n\n  useEffect(() => {\n    // Recalculate aggregated data whenever selected date changes\n    const data = aggregateData(transactions);\n    setAggregatedData(data);\n  }, [transactions, selectedDate]);\n\n  useEffect(() => {\n    // Check if there's an existing chart\n    if (chart) {\n      // Destroy the existing chart\n      chart.destroy();\n    }\n\n    if (aggregatedData.labels.length > 0) {\n      const ctx = document.getElementById('monthlyFinancialChart').getContext('2d');\n      const newChart = new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: aggregatedData.labels,\n          datasets: [\n            {\n              label: 'Monthly Transactions',\n              data: aggregatedData.data,\n              backgroundColor: aggregatedData.data.map((amount) =>\n                amount >= 0 ? 'rgba(75, 192, 192, 0.2)' : 'rgba(255, 99, 132, 0.2)'\n              ),\n              borderColor: aggregatedData.data.map((amount) =>\n                amount >= 0 ? 'rgba(75, 192, 192, 1)' : 'rgba(255, 99, 132, 1)'\n              ),\n              borderWidth: 1,\n            },\n            {\n              type: 'line',\n              label: 'Balance',\n              data: aggregatedData.balanceData,\n              borderColor: 'rgba(255, 206, 86, 1)',\n              borderWidth: 2,\n              fill: false,\n            },\n          ],\n        },\n        options: {\n          scales: {\n            x: {\n              title: {\n                display: true,\n                text: 'Month',\n              },\n            },\n            y: {\n              beginAtZero: true,\n              suggestedMin: aggregatedData.minLoss,\n              suggestedMax: aggregatedData.maxIncome,\n              title: {\n                display: true,\n                text: 'Transaction Amount',\n              },\n            },\n          },\n        },\n      });\n\n      setChart(newChart);\n    }\n  }, [aggregatedData]);\n\n  const aggregateData = (data) => {\n    const aggregatedByMonth = data.reduce(\n      (result, transaction) => {\n        const date = new Date(transaction.timestamp);\n        const formattedMonth = format(date, 'MM/yyyy');\n\n        // Check if the transaction is in the selected year\n        if (getYear(date) === getYear(selectedDate)) {\n          const existingIndex = result.labels.findIndex((label) => label === formattedMonth);\n\n          if (existingIndex !== -1) {\n            result.data[existingIndex] += transaction.amount;\n          } else {\n            result.labels.push(formattedMonth);\n            result.data.push(transaction.amount);\n          }\n\n          // Update the maximum income and minimum loss\n          if (transaction.amount >= 0) {\n            result.maxIncome = Math.max(result.maxIncome, transaction.amount);\n          } else {\n            result.minLoss = Math.min(result.minLoss, transaction.amount);\n          }\n\n          // Update the balance for each transaction\n          const lastBalance = result.balanceData[result.balanceData.length - 1] || 0;\n          result.balanceData.push(lastBalance + transaction.amount);\n        }\n\n        return result;\n      },\n      { labels: [], data: [], balanceData: [], maxIncome: 0, minLoss: 0 }\n    );\n\n    return aggregatedByMonth;\n  };\n\n  const handleDateChange = (date) => {\n    setSelectedDate(date);\n  };\n\n  return (\n    <div className='financialChart'>\n      <DatePicker className=\"financialChart__datePicker\" selected={selectedDate} onChange={handleDateChange} dateFormat=\"MM/yyyy\" showMonthYearPicker />\n      <canvas id=\"monthlyFinancialChart\" width=\"800\" height=\"400\"></canvas>\n    </div>\n  );\n};\n\nexport default MonthlyFinancialChart;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,UAAU,MAAM,kBAAkB;AACzC,OAAO,4CAA4C;AACnD,SAASC,KAAK,EAAEC,aAAa,QAAQ,eAAe;AACpD,SAASC,MAAM,EAAEC,OAAO,QAAQ,UAAU;;AAE1C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACAL,KAAK,CAACM,QAAQ,CAAC,GAAGL,aAAa,CAAC;AAEhC,MAAMM,qBAAqB,GAAGA,CAAC;EAAEC;AAAa,CAAC,KAAK;EAAAC,EAAA;EAClD,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACc,YAAY,EAAEC,eAAe,CAAC,GAAGf,QAAQ,CAAC,IAAIgB,IAAI,CAAC,CAAC,CAAC;EAC5D,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGlB,QAAQ,CAAC;IACnDmB,MAAM,EAAE,EAAE;IACVC,IAAI,EAAE,EAAE;IACRC,WAAW,EAAE,EAAE;IACfC,OAAO,EAAE,CAAC;IACVC,SAAS,EAAE;EACb,CAAC,CAAC;EAEFxB,SAAS,CAAC,MAAM;IACd;IACA,MAAMqB,IAAI,GAAGI,aAAa,CAACd,YAAY,CAAC;IACxCQ,iBAAiB,CAACE,IAAI,CAAC;EACzB,CAAC,EAAE,CAACV,YAAY,EAAEI,YAAY,CAAC,CAAC;EAEhCf,SAAS,CAAC,MAAM;IACd;IACA,IAAIa,KAAK,EAAE;MACT;MACAA,KAAK,CAACa,OAAO,CAAC,CAAC;IACjB;IAEA,IAAIR,cAAc,CAACE,MAAM,CAACO,MAAM,GAAG,CAAC,EAAE;MACpC,MAAMC,GAAG,GAAGC,QAAQ,CAACC,cAAc,CAAC,uBAAuB,CAAC,CAACC,UAAU,CAAC,IAAI,CAAC;MAC7E,MAAMC,QAAQ,GAAG,IAAI7B,KAAK,CAACyB,GAAG,EAAE;QAC9BK,IAAI,EAAE,KAAK;QACXZ,IAAI,EAAE;UACJD,MAAM,EAAEF,cAAc,CAACE,MAAM;UAC7Bc,QAAQ,EAAE,CACR;YACEC,KAAK,EAAE,sBAAsB;YAC7Bd,IAAI,EAAEH,cAAc,CAACG,IAAI;YACzBe,eAAe,EAAElB,cAAc,CAACG,IAAI,CAACgB,GAAG,CAAEC,MAAM,IAC9CA,MAAM,IAAI,CAAC,GAAG,yBAAyB,GAAG,yBAC5C,CAAC;YACDC,WAAW,EAAErB,cAAc,CAACG,IAAI,CAACgB,GAAG,CAAEC,MAAM,IAC1CA,MAAM,IAAI,CAAC,GAAG,uBAAuB,GAAG,uBAC1C,CAAC;YACDE,WAAW,EAAE;UACf,CAAC,EACD;YACEP,IAAI,EAAE,MAAM;YACZE,KAAK,EAAE,SAAS;YAChBd,IAAI,EAAEH,cAAc,CAACI,WAAW;YAChCiB,WAAW,EAAE,uBAAuB;YACpCC,WAAW,EAAE,CAAC;YACdC,IAAI,EAAE;UACR,CAAC;QAEL,CAAC;QACDC,OAAO,EAAE;UACPC,MAAM,EAAE;YACNC,CAAC,EAAE;cACDC,KAAK,EAAE;gBACLC,OAAO,EAAE,IAAI;gBACbC,IAAI,EAAE;cACR;YACF,CAAC;YACDC,CAAC,EAAE;cACDC,WAAW,EAAE,IAAI;cACjBC,YAAY,EAAEhC,cAAc,CAACK,OAAO;cACpC4B,YAAY,EAAEjC,cAAc,CAACM,SAAS;cACtCqB,KAAK,EAAE;gBACLC,OAAO,EAAE,IAAI;gBACbC,IAAI,EAAE;cACR;YACF;UACF;QACF;MACF,CAAC,CAAC;MAEFjC,QAAQ,CAACkB,QAAQ,CAAC;IACpB;EACF,CAAC,EAAE,CAACd,cAAc,CAAC,CAAC;EAEpB,MAAMO,aAAa,GAAIJ,IAAI,IAAK;IAC9B,MAAM+B,iBAAiB,GAAG/B,IAAI,CAACgC,MAAM,CACnC,CAACC,MAAM,EAAEC,WAAW,KAAK;MACvB,MAAMC,IAAI,GAAG,IAAIvC,IAAI,CAACsC,WAAW,CAACE,SAAS,CAAC;MAC5C,MAAMC,cAAc,GAAGrD,MAAM,CAACmD,IAAI,EAAE,SAAS,CAAC;;MAE9C;MACA,IAAIlD,OAAO,CAACkD,IAAI,CAAC,KAAKlD,OAAO,CAACS,YAAY,CAAC,EAAE;QAC3C,MAAM4C,aAAa,GAAGL,MAAM,CAAClC,MAAM,CAACwC,SAAS,CAAEzB,KAAK,IAAKA,KAAK,KAAKuB,cAAc,CAAC;QAElF,IAAIC,aAAa,KAAK,CAAC,CAAC,EAAE;UACxBL,MAAM,CAACjC,IAAI,CAACsC,aAAa,CAAC,IAAIJ,WAAW,CAACjB,MAAM;QAClD,CAAC,MAAM;UACLgB,MAAM,CAAClC,MAAM,CAACyC,IAAI,CAACH,cAAc,CAAC;UAClCJ,MAAM,CAACjC,IAAI,CAACwC,IAAI,CAACN,WAAW,CAACjB,MAAM,CAAC;QACtC;;QAEA;QACA,IAAIiB,WAAW,CAACjB,MAAM,IAAI,CAAC,EAAE;UAC3BgB,MAAM,CAAC9B,SAAS,GAAGsC,IAAI,CAACC,GAAG,CAACT,MAAM,CAAC9B,SAAS,EAAE+B,WAAW,CAACjB,MAAM,CAAC;QACnE,CAAC,MAAM;UACLgB,MAAM,CAAC/B,OAAO,GAAGuC,IAAI,CAACE,GAAG,CAACV,MAAM,CAAC/B,OAAO,EAAEgC,WAAW,CAACjB,MAAM,CAAC;QAC/D;;QAEA;QACA,MAAM2B,WAAW,GAAGX,MAAM,CAAChC,WAAW,CAACgC,MAAM,CAAChC,WAAW,CAACK,MAAM,GAAG,CAAC,CAAC,IAAI,CAAC;QAC1E2B,MAAM,CAAChC,WAAW,CAACuC,IAAI,CAACI,WAAW,GAAGV,WAAW,CAACjB,MAAM,CAAC;MAC3D;MAEA,OAAOgB,MAAM;IACf,CAAC,EACD;MAAElC,MAAM,EAAE,EAAE;MAAEC,IAAI,EAAE,EAAE;MAAEC,WAAW,EAAE,EAAE;MAAEE,SAAS,EAAE,CAAC;MAAED,OAAO,EAAE;IAAE,CACpE,CAAC;IAED,OAAO6B,iBAAiB;EAC1B,CAAC;EAED,MAAMc,gBAAgB,GAAIV,IAAI,IAAK;IACjCxC,eAAe,CAACwC,IAAI,CAAC;EACvB,CAAC;EAED,oBACEhD,OAAA;IAAK2D,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC7B5D,OAAA,CAACN,UAAU;MAACiE,SAAS,EAAC,4BAA4B;MAACE,QAAQ,EAAEtD,YAAa;MAACuD,QAAQ,EAAEJ,gBAAiB;MAACK,UAAU,EAAC,SAAS;MAACC,mBAAmB;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAClJpE,OAAA;MAAQqE,EAAE,EAAC,uBAAuB;MAACC,KAAK,EAAC,KAAK;MAACC,MAAM,EAAC;IAAK;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClE,CAAC;AAEV,CAAC;AAAChE,EAAA,CA5HIF,qBAAqB;AAAAsE,EAAA,GAArBtE,qBAAqB;AA8H3B,eAAeA,qBAAqB;AAAC,IAAAsE,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}