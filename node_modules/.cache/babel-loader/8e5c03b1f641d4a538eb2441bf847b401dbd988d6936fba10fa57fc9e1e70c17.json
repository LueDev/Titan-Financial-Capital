{"ast":null,"code":"var _jsxFileName = \"/Users/luisjorge/code/Flatiron-Phase-2/16-Phase-2-Project/titan-capital-financial/src/components/DailyTransactionChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { Chart, registerables } from \"chart.js/auto\";\nimport { format, startOfWeek, endOfWeek, startOfMonth, endOfMonth } from \"date-fns\";\n\n// Register necessary plugins\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(...registerables);\nconst DailyTransactionChart = ({\n  transactions\n}) => {\n  _s();\n  const [chart, setChart] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  useEffect(() => {\n    // Check if there's an existing chart\n    if (chart) {\n      // Destroy the existing chart\n      chart.destroy();\n    }\n    if (transactions.length > 0) {\n      const aggregatedData = aggregateData(transactions);\n      const ctx = document.getElementById(\"financialChart\").getContext(\"2d\");\n      const newChart = new Chart(ctx, {\n        type: \"bar\",\n        data: {\n          labels: aggregatedData.labels,\n          datasets: [{\n            label: \"Daily Transactions\",\n            data: aggregatedData.data,\n            backgroundColor: aggregatedData.data.map(amount => amount >= 0 ? \"rgba(75, 192, 192, 0.2)\" : \"rgba(255, 99, 132, 0.2)\"),\n            borderColor: aggregatedData.data.map(amount => amount >= 0 ? \"rgba(75, 192, 192, 1)\" : \"rgba(255, 99, 132, 1)\"),\n            borderWidth: 1\n          }]\n        },\n        options: {\n          scales: {\n            x: {\n              title: {\n                display: true,\n                text: \"Date\"\n              }\n            },\n            y: {\n              beginAtZero: true,\n              title: {\n                display: true,\n                text: \"Transaction Amount\"\n              }\n            }\n          }\n        }\n      });\n      setChart(prevChart => newChart);\n    }\n  }, [transactions, selectedDate]);\n  const aggregateData = data => {\n    const aggregatedByDay = data.reduce((result, transaction) => {\n      const date = new Date(transaction.timestamp);\n      const formattedDate = format(date, \"MM/dd/yyyy\");\n\n      // Check if the transaction is in the selected month\n      // Check if the transaction is on the selected day\n      if (date.getMonth() === selectedDate.getMonth() && date.getFullYear() === selectedDate.getFullYear() && date.getDate() === selectedDate.getDate()) {\n        const existingIndex = result.labels.findIndex(label => label === formattedDate);\n        if (existingIndex !== -1) {\n          result.data[existingIndex] += transaction.amount;\n        } else {\n          result.labels.push(formattedDate);\n          result.data.push(transaction.amount);\n        }\n      }\n      return result;\n    }, {\n      labels: [],\n      data: []\n    });\n    return aggregatedByDay;\n  };\n  const handleDateChange = date => {\n    setSelectedDate(date);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"financialChart\",\n    children: [/*#__PURE__*/_jsxDEV(DatePicker, {\n      className: \"financialChart__datePicker\",\n      selected: selectedDate,\n      onChange: handleDateChange,\n      dateFormat: \"MM/yyyy\",\n      showMonthYearPicker: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"financialChart\",\n      width: \"800\",\n      height: \"400\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n};\n_s(DailyTransactionChart, \"p1f5IXVlc6TPChPz2M4FcRug1a4=\");\n_c = DailyTransactionChart;\nexport default DailyTransactionChart;\nvar _c;\n$RefreshReg$(_c, \"DailyTransactionChart\");","map":{"version":3,"names":["React","useEffect","useState","DatePicker","Chart","registerables","format","startOfWeek","endOfWeek","startOfMonth","endOfMonth","jsxDEV","_jsxDEV","register","DailyTransactionChart","transactions","_s","chart","setChart","selectedDate","setSelectedDate","Date","destroy","length","aggregatedData","aggregateData","ctx","document","getElementById","getContext","newChart","type","data","labels","datasets","label","backgroundColor","map","amount","borderColor","borderWidth","options","scales","x","title","display","text","y","beginAtZero","prevChart","aggregatedByDay","reduce","result","transaction","date","timestamp","formattedDate","getMonth","getFullYear","getDate","existingIndex","findIndex","push","handleDateChange","className","children","selected","onChange","dateFormat","showMonthYearPicker","fileName","_jsxFileName","lineNumber","columnNumber","id","width","height","_c","$RefreshReg$"],"sources":["/Users/luisjorge/code/Flatiron-Phase-2/16-Phase-2-Project/titan-capital-financial/src/components/DailyTransactionChart.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { Chart, registerables } from \"chart.js/auto\";\nimport {\n  format,\n  startOfWeek,\n  endOfWeek,\n  startOfMonth,\n  endOfMonth,\n} from \"date-fns\";\n\n// Register necessary plugins\nChart.register(...registerables);\n\nconst DailyTransactionChart = ({ transactions }) => {\n  const [chart, setChart] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(new Date());\n\n  useEffect(() => {\n    // Check if there's an existing chart\n    if (chart) {\n      // Destroy the existing chart\n      chart.destroy();\n    }\n\n    if (transactions.length > 0) {\n      const aggregatedData = aggregateData(transactions);\n\n      const ctx = document.getElementById(\"financialChart\").getContext(\"2d\");\n      const newChart = new Chart(ctx, {\n        type: \"bar\",\n        data: {\n          labels: aggregatedData.labels,\n          datasets: [\n            {\n              label: \"Daily Transactions\",\n              data: aggregatedData.data,\n              backgroundColor: aggregatedData.data.map((amount) =>\n                amount >= 0\n                  ? \"rgba(75, 192, 192, 0.2)\"\n                  : \"rgba(255, 99, 132, 0.2)\"\n              ),\n              borderColor: aggregatedData.data.map((amount) =>\n                amount >= 0 ? \"rgba(75, 192, 192, 1)\" : \"rgba(255, 99, 132, 1)\"\n              ),\n              borderWidth: 1,\n            },\n          ],\n        },\n        options: {\n          scales: {\n            x: {\n              title: {\n                display: true,\n                text: \"Date\",\n              },\n            },\n            y: {\n              beginAtZero: true,\n              title: {\n                display: true,\n                text: \"Transaction Amount\",\n              },\n            },\n          },\n        },\n      });\n\n      setChart((prevChart) => newChart);\n    }\n  }, [transactions, selectedDate]);\n\n  const aggregateData = (data) => {\n    const aggregatedByDay = data.reduce(\n      (result, transaction) => {\n        const date = new Date(transaction.timestamp);\n        const formattedDate = format(date, \"MM/dd/yyyy\");\n\n        // Check if the transaction is in the selected month\n        // Check if the transaction is on the selected day\n        if (\n          date.getMonth() === selectedDate.getMonth() &&\n          date.getFullYear() === selectedDate.getFullYear() &&\n          date.getDate() === selectedDate.getDate()\n        ) {\n          const existingIndex = result.labels.findIndex(\n            (label) => label === formattedDate\n          );\n\n          if (existingIndex !== -1) {\n            result.data[existingIndex] += transaction.amount;\n          } else {\n            result.labels.push(formattedDate);\n            result.data.push(transaction.amount);\n          }\n        }\n\n        return result;\n      },\n      { labels: [], data: [] }\n    );\n\n    return aggregatedByDay;\n  };\n\n  const handleDateChange = (date) => {\n    \n    setSelectedDate(date);\n  };\n\n  return (\n    <div className=\"financialChart\">\n      <DatePicker\n        className=\"financialChart__datePicker\"\n        selected={selectedDate}\n        onChange={handleDateChange}\n        dateFormat=\"MM/yyyy\"\n        showMonthYearPicker\n      />\n      <canvas id=\"financialChart\" width=\"800\" height=\"400\"></canvas>\n    </div>\n  );\n};\n\nexport default DailyTransactionChart;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}