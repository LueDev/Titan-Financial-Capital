{"ast":null,"code":"var _jsxFileName = \"/Users/luisjorge/code/Flatiron-Phase-2/16-Phase-2-Project/titan-capital-financial/src/components/MonthlyFinancialChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { Chart, registerables } from 'chart.js/auto';\nimport { format, getYear } from 'date-fns';\n\n// Register necessary plugins\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(...registerables);\nconst MonthlyFinancialChart = ({\n  transactions\n}) => {\n  _s();\n  const [chart, setChart] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [aggregatedData, setAggregatedData] = useState({\n    labels: [],\n    data: [],\n    minLoss: 0,\n    maxIncome: 0\n  });\n  useEffect(() => {\n    // Recalculate aggregated data whenever selected date changes\n    const data = aggregateData(transactions);\n    setAggregatedData(data);\n  }, [transactions, selectedDate]);\n  useEffect(() => {\n    // Check if there's an existing chart\n    if (chart) {\n      // Destroy the existing chart\n      chart.destroy();\n    }\n    if (aggregatedData.labels.length > 0) {\n      const ctx = document.getElementById('monthlyFinancialChart').getContext('2d');\n      const newChart = new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: aggregatedData.labels,\n          datasets: [{\n            label: 'Monthly Transactions',\n            data: aggregatedData.data,\n            backgroundColor: aggregatedData.data.map(amount => amount >= 0 ? 'rgba(75, 192, 192, 0.2)' : 'rgba(255, 99, 132, 0.2)'),\n            borderColor: aggregatedData.data.map(amount => amount >= 0 ? 'rgba(75, 192, 192, 1)' : 'rgba(255, 99, 132, 1)'),\n            borderWidth: 1\n          }]\n        },\n        options: {\n          scales: {\n            x: {\n              title: {\n                display: true,\n                text: 'Month'\n              }\n            },\n            y: {\n              beginAtZero: true,\n              suggestedMin: aggregatedData.minLoss,\n              suggestedMax: aggregatedData.maxIncome,\n              title: {\n                display: true,\n                text: 'Transaction Amount'\n              }\n            }\n          }\n        }\n      });\n      setChart(newChart);\n    }\n  }, [aggregatedData]);\n  const aggregateData = (data, aggregationType) => {\n    const result = {\n      labels: [],\n      data: [],\n      balanceData: []\n    };\n    data.forEach(transaction => {\n      const date = new Date(transaction.timestamp);\n      const formattedDate = aggregationType === 'daily' ? format(date, 'MM/dd/yyyy') : format(date, 'MM/yyyy');\n\n      // Check if the transaction is in the selected month and year\n      if (aggregationType === 'daily' && date.getMonth() === selectedDate.getMonth() && date.getFullYear() === selectedDate.getFullYear() || aggregationType === 'monthly' && date.getFullYear() === selectedDate.getFullYear()) {\n        // Find the index of the date in the labels array\n        const index = result.labels.indexOf(formattedDate);\n\n        // If the date doesn't exist, add it to the labels array and initialize the data array\n        if (index === -1) {\n          result.labels.push(formattedDate);\n          result.data.push([]);\n        }\n\n        // Add the transaction amount to the data array for the corresponding date\n        result.data[result.labels.indexOf(formattedDate)].push({\n          amount: transaction.amount,\n          timestamp: date.getTime() // Store timestamp for sorting transactions by time\n        });\n\n        // Update the balance for each transaction\n        const lastBalance = result.balanceData[result.balanceData.length - 1] || 0;\n        result.balanceData.push(lastBalance + transaction.amount);\n      }\n    });\n\n    // Sort transactions within each date based on timestamp\n    result.data.forEach(transactions => {\n      transactions.sort((a, b) => a.timestamp - b.timestamp);\n    });\n    return result;\n  };\n  const handleDateChange = date => {\n    setSelectedDate(date);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"financialChart\",\n    children: [/*#__PURE__*/_jsxDEV(DatePicker, {\n      className: \"financialChart__datePicker\",\n      selected: selectedDate,\n      onChange: handleDateChange,\n      dateFormat: \"MM/yyyy\",\n      showMonthYearPicker: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"monthlyFinancialChart\",\n      width: \"800\",\n      height: \"400\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n};\n_s(MonthlyFinancialChart, \"gIuPFlU8I/9l9pqld9FHP2vU8MY=\");\n_c = MonthlyFinancialChart;\nexport default MonthlyFinancialChart;\nvar _c;\n$RefreshReg$(_c, \"MonthlyFinancialChart\");","map":{"version":3,"names":["React","useEffect","useState","DatePicker","Chart","registerables","format","getYear","jsxDEV","_jsxDEV","register","MonthlyFinancialChart","transactions","_s","chart","setChart","selectedDate","setSelectedDate","Date","aggregatedData","setAggregatedData","labels","data","minLoss","maxIncome","aggregateData","destroy","length","ctx","document","getElementById","getContext","newChart","type","datasets","label","backgroundColor","map","amount","borderColor","borderWidth","options","scales","x","title","display","text","y","beginAtZero","suggestedMin","suggestedMax","aggregationType","result","balanceData","forEach","transaction","date","timestamp","formattedDate","getMonth","getFullYear","index","indexOf","push","getTime","lastBalance","sort","a","b","handleDateChange","className","children","selected","onChange","dateFormat","showMonthYearPicker","fileName","_jsxFileName","lineNumber","columnNumber","id","width","height","_c","$RefreshReg$"],"sources":["/Users/luisjorge/code/Flatiron-Phase-2/16-Phase-2-Project/titan-capital-financial/src/components/MonthlyFinancialChart.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { Chart, registerables } from 'chart.js/auto';\nimport { format, getYear } from 'date-fns';\n\n// Register necessary plugins\nChart.register(...registerables);\n\nconst MonthlyFinancialChart = ({ transactions }) => {\n  const [chart, setChart] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [aggregatedData, setAggregatedData] = useState({\n    labels: [],\n    data: [],\n    minLoss: 0,\n    maxIncome: 0,\n  });\n\n  useEffect(() => {\n    // Recalculate aggregated data whenever selected date changes\n    const data = aggregateData(transactions);\n    setAggregatedData(data);\n  }, [transactions, selectedDate]);\n\n  useEffect(() => {\n    // Check if there's an existing chart\n    if (chart) {\n      // Destroy the existing chart\n      chart.destroy();\n    }\n\n    if (aggregatedData.labels.length > 0) {\n      const ctx = document.getElementById('monthlyFinancialChart').getContext('2d');\n      const newChart = new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: aggregatedData.labels,\n          datasets: [\n            {\n              label: 'Monthly Transactions',\n              data: aggregatedData.data,\n              backgroundColor: aggregatedData.data.map((amount) =>\n                amount >= 0 ? 'rgba(75, 192, 192, 0.2)' : 'rgba(255, 99, 132, 0.2)'\n              ),\n              borderColor: aggregatedData.data.map((amount) =>\n                amount >= 0 ? 'rgba(75, 192, 192, 1)' : 'rgba(255, 99, 132, 1)'\n              ),\n              borderWidth: 1,\n            },\n          ],\n        },\n        options: {\n          scales: {\n            x: {\n              title: {\n                display: true,\n                text: 'Month',\n              },\n            },\n            y: {\n              beginAtZero: true,\n              suggestedMin: aggregatedData.minLoss,\n              suggestedMax: aggregatedData.maxIncome,\n              title: {\n                display: true,\n                text: 'Transaction Amount',\n              },\n            },\n          },\n        },\n      });\n\n      setChart(newChart);\n    }\n  }, [aggregatedData]);\n\n  const aggregateData = (data, aggregationType) => {\n    const result = { labels: [], data: [], balanceData: [] };\n  \n    data.forEach((transaction) => {\n      const date = new Date(transaction.timestamp);\n      const formattedDate = aggregationType === 'daily' ? format(date, 'MM/dd/yyyy') : format(date, 'MM/yyyy');\n  \n      // Check if the transaction is in the selected month and year\n      if (\n        (aggregationType === 'daily' && date.getMonth() === selectedDate.getMonth() && date.getFullYear() === selectedDate.getFullYear()) ||\n        (aggregationType === 'monthly' && date.getFullYear() === selectedDate.getFullYear())\n      ) {\n        // Find the index of the date in the labels array\n        const index = result.labels.indexOf(formattedDate);\n  \n        // If the date doesn't exist, add it to the labels array and initialize the data array\n        if (index === -1) {\n          result.labels.push(formattedDate);\n          result.data.push([]);\n        }\n  \n        // Add the transaction amount to the data array for the corresponding date\n        result.data[result.labels.indexOf(formattedDate)].push({\n          amount: transaction.amount,\n          timestamp: date.getTime(), // Store timestamp for sorting transactions by time\n        });\n  \n        // Update the balance for each transaction\n        const lastBalance = result.balanceData[result.balanceData.length - 1] || 0;\n        result.balanceData.push(lastBalance + transaction.amount);\n      }\n    });\n  \n    // Sort transactions within each date based on timestamp\n    result.data.forEach((transactions) => {\n      transactions.sort((a, b) => a.timestamp - b.timestamp);\n    });\n  \n    return result;\n  };\n  \n\n  const handleDateChange = (date) => {\n    setSelectedDate(date);\n  };\n\n  return (\n    <div className='financialChart'>\n      <DatePicker className=\"financialChart__datePicker\" selected={selectedDate} onChange={handleDateChange} dateFormat=\"MM/yyyy\" showMonthYearPicker />\n      <canvas id=\"monthlyFinancialChart\" width=\"800\" height=\"400\"></canvas>\n    </div>\n  );\n};\n\nexport default MonthlyFinancialChart;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}