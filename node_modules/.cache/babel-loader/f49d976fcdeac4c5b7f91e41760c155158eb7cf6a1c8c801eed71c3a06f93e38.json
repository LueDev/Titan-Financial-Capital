{"ast":null,"code":"var _jsxFileName = \"/Users/luisjorge/code/Flatiron-Phase-2/16-Phase-2-Project/titan-capital-financial/src/components/DailyTransactionChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { Chart, registerables } from 'chart.js/auto';\nimport { format } from 'date-fns';\n\n// Register necessary plugins\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(...registerables);\nconst DailyTransactionChart = ({\n  transactions\n}) => {\n  _s();\n  const [chart, setChart] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  useEffect(() => {\n    // Check if there's an existing chart\n    if (chart) {\n      // Destroy the existing chart\n      chart.destroy();\n    }\n    if (transactions.length > 0) {\n      const aggregatedData = aggregateData(transactions);\n      const ctx = document.getElementById('financialChart').getContext('2d');\n      const newChart = new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: aggregatedData.labels,\n          datasets: [{\n            label: 'Daily Transactions',\n            data: aggregatedData.data,\n            backgroundColor: aggregatedData.data.map(amount => amount >= 0 ? 'rgba(75, 192, 192, 0.2)' : 'rgba(255, 99, 132, 0.2)'),\n            borderColor: aggregatedData.data.map(amount => amount >= 0 ? 'rgba(75, 192, 192, 1)' : 'rgba(255, 99, 132, 1)'),\n            borderWidth: 1,\n            yAxisID: 'transactions'\n          }, {\n            label: 'Balance',\n            data: aggregatedData.balanceData,\n            type: 'line',\n            fill: false,\n            borderColor: 'rgba(255, 206, 86, 1)',\n            borderWidth: 2,\n            yAxisID: 'balance'\n          }]\n        },\n        options: {\n          scales: {\n            x: {\n              title: {\n                display: true,\n                text: 'Date'\n              }\n            },\n            transactions: {\n              type: 'linear',\n              position: 'left',\n              title: {\n                display: true,\n                text: 'Transaction Amount'\n              }\n            },\n            balance: {\n              type: 'linear',\n              position: 'right',\n              title: {\n                display: true,\n                text: 'Balance'\n              },\n              ticks: {\n                callback: value => `$${value}`\n              }\n            }\n          }\n        }\n      });\n      setChart(prevChart => newChart);\n    }\n  }, [transactions, selectedDate]);\n  const aggregateData = data => {\n    const aggregatedByDay = data.reduce((result, transaction) => {\n      const date = new Date(transaction.timestamp);\n      const formattedDate = format(date, 'MM/dd/yyyy');\n\n      // Check if the transaction is in the selected month\n      if (date.getMonth() === selectedDate.getMonth() && date.getFullYear() === selectedDate.getFullYear()) {\n        const existingIndex = result.labels.findIndex(label => label === formattedDate);\n        if (existingIndex !== -1) {\n          // If the day already exists, add the transaction amount to the array\n          result.data[existingIndex].push(transaction.amount);\n        } else {\n          // If the day doesn't exist, create a new entry with the transaction amount as an array\n          result.labels.push(formattedDate);\n          result.data.push([transaction.amount]);\n        }\n\n        // Update the balance data for each transaction\n        const lastBalance = result.balanceData[result.balanceData.length - 1];\n        result.balanceData.push(lastBalance + transaction.amount);\n      }\n      return result;\n    }, {\n      labels: [],\n      data: [],\n      balanceData: [0]\n    });\n\n    // Sum up the transaction amounts for each day\n    aggregatedByDay.data = aggregatedByDay.data.map(amounts => amounts.reduce((sum, amount) => sum + amount, 0));\n    return aggregatedByDay;\n  };\n  const handleDateChange = date => {\n    setSelectedDate(date);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"financialChart\",\n    children: [/*#__PURE__*/_jsxDEV(DatePicker, {\n      className: \"financialChart__datePicker\",\n      selected: selectedDate,\n      onChange: handleDateChange,\n      dateFormat: \"MM/yyyy\",\n      showMonthYearPicker: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"financialChart\",\n      width: \"800\",\n      height: \"400\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n};\n_s(DailyTransactionChart, \"p1f5IXVlc6TPChPz2M4FcRug1a4=\");\n_c = DailyTransactionChart;\nexport default DailyTransactionChart;\nvar _c;\n$RefreshReg$(_c, \"DailyTransactionChart\");","map":{"version":3,"names":["React","useEffect","useState","DatePicker","Chart","registerables","format","jsxDEV","_jsxDEV","register","DailyTransactionChart","transactions","_s","chart","setChart","selectedDate","setSelectedDate","Date","destroy","length","aggregatedData","aggregateData","ctx","document","getElementById","getContext","newChart","type","data","labels","datasets","label","backgroundColor","map","amount","borderColor","borderWidth","yAxisID","balanceData","fill","options","scales","x","title","display","text","position","balance","ticks","callback","value","prevChart","aggregatedByDay","reduce","result","transaction","date","timestamp","formattedDate","getMonth","getFullYear","existingIndex","findIndex","push","lastBalance","amounts","sum","handleDateChange","className","children","selected","onChange","dateFormat","showMonthYearPicker","fileName","_jsxFileName","lineNumber","columnNumber","id","width","height","_c","$RefreshReg$"],"sources":["/Users/luisjorge/code/Flatiron-Phase-2/16-Phase-2-Project/titan-capital-financial/src/components/DailyTransactionChart.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { Chart, registerables } from 'chart.js/auto';\nimport { format } from 'date-fns';\n\n// Register necessary plugins\nChart.register(...registerables);\n\nconst DailyTransactionChart = ({ transactions }) => {\n  const [chart, setChart] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(new Date());\n\n  useEffect(() => {\n    // Check if there's an existing chart\n    if (chart) {\n      // Destroy the existing chart\n      chart.destroy();\n    }\n\n    if (transactions.length > 0) {\n      const aggregatedData = aggregateData(transactions);\n\n      const ctx = document.getElementById('financialChart').getContext('2d');\n      const newChart = new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: aggregatedData.labels,\n          datasets: [\n            {\n              label: 'Daily Transactions',\n              data: aggregatedData.data,\n              backgroundColor: aggregatedData.data.map((amount) =>\n                amount >= 0 ? 'rgba(75, 192, 192, 0.2)' : 'rgba(255, 99, 132, 0.2)'\n              ),\n              borderColor: aggregatedData.data.map((amount) =>\n                amount >= 0 ? 'rgba(75, 192, 192, 1)' : 'rgba(255, 99, 132, 1)'\n              ),\n              borderWidth: 1,\n              yAxisID: 'transactions',\n            },\n            {\n              label: 'Balance',\n              data: aggregatedData.balanceData,\n              type: 'line',\n              fill: false,\n              borderColor: 'rgba(255, 206, 86, 1)',\n              borderWidth: 2,\n              yAxisID: 'balance',\n            },\n          ],\n        },\n        options: {\n          scales: {\n            x: {\n              title: {\n                display: true,\n                text: 'Date',\n              },\n            },\n            transactions: {\n              type: 'linear',\n              position: 'left',\n              title: {\n                display: true,\n                text: 'Transaction Amount',\n              },\n            },\n            balance: {\n              type: 'linear',\n              position: 'right',\n              title: {\n                display: true,\n                text: 'Balance',\n              },\n              ticks: {\n                callback: (value) => `$${value}`,\n              },\n            },\n          },\n        },\n      });\n\n      setChart((prevChart) => newChart);\n    }\n  }, [transactions, selectedDate]);\n\n  const aggregateData = (data) => {\n    const aggregatedByDay = data.reduce(\n      (result, transaction) => {\n        const date = new Date(transaction.timestamp);\n        const formattedDate = format(date, 'MM/dd/yyyy');\n  \n        // Check if the transaction is in the selected month\n        if (date.getMonth() === selectedDate.getMonth() && date.getFullYear() === selectedDate.getFullYear()) {\n          const existingIndex = result.labels.findIndex((label) => label === formattedDate);\n  \n          if (existingIndex !== -1) {\n            // If the day already exists, add the transaction amount to the array\n            result.data[existingIndex].push(transaction.amount);\n          } else {\n            // If the day doesn't exist, create a new entry with the transaction amount as an array\n            result.labels.push(formattedDate);\n            result.data.push([transaction.amount]);\n          }\n  \n          // Update the balance data for each transaction\n          const lastBalance = result.balanceData[result.balanceData.length - 1];\n          result.balanceData.push(lastBalance + transaction.amount);\n        }\n  \n        return result;\n      },\n      { labels: [], data: [], balanceData: [0] }\n    );\n  \n    // Sum up the transaction amounts for each day\n    aggregatedByDay.data = aggregatedByDay.data.map((amounts) => amounts.reduce((sum, amount) => sum + amount, 0));\n  \n    return aggregatedByDay;\n  };\n  \n  \n\n  const handleDateChange = (date) => {\n    setSelectedDate(date);\n  };\n\n  return (\n    <div className=\"financialChart\">\n      <DatePicker className=\"financialChart__datePicker\" selected={selectedDate} onChange={handleDateChange} dateFormat=\"MM/yyyy\" showMonthYearPicker />\n      <canvas id=\"financialChart\" width=\"800\" height=\"400\"></canvas>\n    </div>\n  );\n};\n\nexport default DailyTransactionChart;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}