{"ast":null,"code":"var _jsxFileName = \"/Users/luisjorge/code/Flatiron-Phase-2/16-Phase-2-Project/titan-capital-financial/src/components/DailyTransactionChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { Chart, registerables } from \"chart.js/auto\";\nimport { format } from \"date-fns\";\n\n// Register necessary plugins\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(...registerables);\nconst DailyTransactionChart = ({\n  transactions\n}) => {\n  _s();\n  const [chart, setChart] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  useEffect(() => {\n    // Check if there's an existing chart\n    if (chart) {\n      // Destroy the existing chart\n      chart.destroy();\n    }\n    if (transactions.length > 0) {\n      const aggregatedData = aggregateData(transactions);\n      const ctx = document.getElementById(\"financialChart\").getContext(\"2d\");\n      const newChart = new Chart(ctx, {\n        type: \"bar\",\n        data: {\n          labels: aggregatedData.labels,\n          datasets: [{\n            label: \"Daily Transactions\",\n            data: aggregatedData.data,\n            backgroundColor: aggregatedData.data.map(amount => amount >= 0 ? \"rgba(75, 192, 192, 0.2)\" : \"rgba(255, 99, 132, 0.2)\"),\n            borderColor: aggregatedData.data.map(amount => amount >= 0 ? \"rgba(75, 192, 192, 1)\" : \"rgba(255, 99, 132, 1)\"),\n            borderWidth: 1,\n            yAxisID: \"transactions\"\n          }, {\n            label: \"Balance\",\n            data: aggregatedData.balanceData,\n            type: \"line\",\n            fill: false,\n            borderColor: \"rgba(255, 206, 86, 1)\",\n            borderWidth: 2,\n            yAxisID: \"balance\"\n          }]\n        },\n        options: {\n          scales: {\n            x: {\n              title: {\n                display: true,\n                text: \"Date\"\n              }\n            },\n            transactions: {\n              type: \"linear\",\n              position: \"left\",\n              title: {\n                display: true,\n                text: \"Transaction Amount\"\n              }\n            },\n            balance: {\n              type: \"linear\",\n              position: \"right\",\n              title: {\n                display: true,\n                text: \"Balance\"\n              },\n              ticks: {\n                callback: value => `$${value}`\n              }\n            }\n          }\n        }\n      });\n      setChart(prevChart => newChart);\n    }\n  }, [transactions, selectedDate]);\n  const aggregateData = data => {\n    // Sort transactions by timestamp before processing\n    // This solved a bug where the correct sum of transactions was inaccurate \n    const sortedTransactions = data.slice().sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));\n    const aggregatedByDay = sortedTransactions.reduce((result, transaction) => {\n      const date = new Date(transaction.timestamp);\n      const formattedDate = format(date, 'MM/dd/yyyy');\n\n      // Check if the transaction is in the selected month\n      if (date.getMonth() === selectedDate.getMonth() && date.getFullYear() === selectedDate.getFullYear()) {\n        const existingDateIndex = result.labels.indexOf(formattedDate);\n        if (existingDateIndex !== -1) {\n          // If date exists, update existing values\n          result.data[existingDateIndex] += transaction.amount;\n          result.balanceData[existingDateIndex] += transaction.amount;\n        } else {\n          // If date doesn't exist, add a new entry\n          result.labels.push(formattedDate);\n          result.data.push(transaction.amount);\n          const previousBalance = result.balanceData.length > 0 ? result.balanceData[result.balanceData.length - 1] : 0;\n          result.balanceData.push(previousBalance + transaction.amount);\n        }\n      }\n      return result;\n    }, {\n      labels: [],\n      data: [],\n      balanceData: []\n    });\n    return aggregatedByDay;\n  };\n  const handleDateChange = date => {\n    setSelectedDate(date);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"financialChart\",\n    children: [/*#__PURE__*/_jsxDEV(DatePicker, {\n      className: \"financialChart__datePicker\",\n      selected: selectedDate,\n      onChange: handleDateChange,\n      dateFormat: \"MM/yyyy\",\n      showMonthYearPicker: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"financialChart\",\n      width: \"1000\",\n      height: \"400\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 5\n  }, this);\n};\n_s(DailyTransactionChart, \"p1f5IXVlc6TPChPz2M4FcRug1a4=\");\n_c = DailyTransactionChart;\nexport default DailyTransactionChart;\nvar _c;\n$RefreshReg$(_c, \"DailyTransactionChart\");","map":{"version":3,"names":["React","useEffect","useState","DatePicker","Chart","registerables","format","jsxDEV","_jsxDEV","register","DailyTransactionChart","transactions","_s","chart","setChart","selectedDate","setSelectedDate","Date","destroy","length","aggregatedData","aggregateData","ctx","document","getElementById","getContext","newChart","type","data","labels","datasets","label","backgroundColor","map","amount","borderColor","borderWidth","yAxisID","balanceData","fill","options","scales","x","title","display","text","position","balance","ticks","callback","value","prevChart","sortedTransactions","slice","sort","a","b","timestamp","aggregatedByDay","reduce","result","transaction","date","formattedDate","getMonth","getFullYear","existingDateIndex","indexOf","push","previousBalance","handleDateChange","className","children","selected","onChange","dateFormat","showMonthYearPicker","fileName","_jsxFileName","lineNumber","columnNumber","id","width","height","_c","$RefreshReg$"],"sources":["/Users/luisjorge/code/Flatiron-Phase-2/16-Phase-2-Project/titan-capital-financial/src/components/DailyTransactionChart.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { Chart, registerables } from \"chart.js/auto\";\nimport { format } from \"date-fns\";\n\n// Register necessary plugins\nChart.register(...registerables);\n\nconst DailyTransactionChart = ({ transactions }) => {\n  const [chart, setChart] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(new Date());\n\n  useEffect(() => {\n    // Check if there's an existing chart\n    if (chart) {\n      // Destroy the existing chart\n      chart.destroy();\n    }\n\n    if (transactions.length > 0) {\n      const aggregatedData = aggregateData(transactions);\n\n      const ctx = document.getElementById(\"financialChart\").getContext(\"2d\");\n      const newChart = new Chart(ctx, {\n        type: \"bar\",\n        data: {\n          labels: aggregatedData.labels,\n          datasets: [\n            {\n              label: \"Daily Transactions\",\n              data: aggregatedData.data,\n              backgroundColor: aggregatedData.data.map((amount) =>\n                amount >= 0\n                  ? \"rgba(75, 192, 192, 0.2)\"\n                  : \"rgba(255, 99, 132, 0.2)\"\n              ),\n              borderColor: aggregatedData.data.map((amount) =>\n                amount >= 0 ? \"rgba(75, 192, 192, 1)\" : \"rgba(255, 99, 132, 1)\"\n              ),\n              borderWidth: 1,\n              yAxisID: \"transactions\",\n            },\n            {\n              label: \"Balance\",\n              data: aggregatedData.balanceData,\n              type: \"line\",\n              fill: false,\n              borderColor: \"rgba(255, 206, 86, 1)\",\n              borderWidth: 2,\n              yAxisID: \"balance\",\n            },\n          ],\n        },\n        options: {\n          scales: {\n            x: {\n              title: {\n                display: true,\n                text: \"Date\",\n              },\n            },\n            transactions: {\n              type: \"linear\",\n              position: \"left\",\n              title: {\n                display: true,\n                text: \"Transaction Amount\",\n              },\n            },\n            balance: {\n              type: \"linear\",\n              position: \"right\",\n              title: {\n                display: true,\n                text: \"Balance\",\n              },\n              ticks: {\n                callback: (value) => `$${value}`,\n              },\n            },\n          },\n        },\n      });\n\n      setChart((prevChart) => newChart);\n    }\n  }, [transactions, selectedDate]);\n\n  const aggregateData = (data) => {\n    // Sort transactions by timestamp before processing\n    // This solved a bug where the correct sum of transactions was inaccurate \n    const sortedTransactions = data.slice().sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));\n  \n    const aggregatedByDay = sortedTransactions.reduce(\n      (result, transaction) => {\n        const date = new Date(transaction.timestamp);\n        const formattedDate = format(date, 'MM/dd/yyyy');\n  \n        // Check if the transaction is in the selected month\n        if (date.getMonth() === selectedDate.getMonth() && date.getFullYear() === selectedDate.getFullYear()) {\n          const existingDateIndex = result.labels.indexOf(formattedDate);\n  \n          if (existingDateIndex !== -1) {\n            // If date exists, update existing values\n            result.data[existingDateIndex] += transaction.amount;\n            result.balanceData[existingDateIndex] += transaction.amount;\n          } else {\n            // If date doesn't exist, add a new entry\n            result.labels.push(formattedDate);\n            result.data.push(transaction.amount);\n            const previousBalance = result.balanceData.length > 0 ? result.balanceData[result.balanceData.length - 1] : 0;\n            result.balanceData.push(previousBalance + transaction.amount);\n          }\n        }\n  \n        return result;\n      },\n      { labels: [], data: [], balanceData: [] }\n    );\n  \n    return aggregatedByDay;\n  };\n  \n\n  const handleDateChange = (date) => {\n    setSelectedDate(date);\n  };\n\n  return (\n    <div className=\"financialChart\">\n      <DatePicker\n        className=\"financialChart__datePicker\"\n        selected={selectedDate}\n        onChange={handleDateChange}\n        dateFormat=\"MM/yyyy\"\n        showMonthYearPicker\n      />\n      <canvas id=\"financialChart\" width=\"1000\" height=\"400\"></canvas>\n    </div>\n  );\n};\n\nexport default DailyTransactionChart;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}